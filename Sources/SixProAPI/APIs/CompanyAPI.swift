//
// CompanyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif

open class CompanyAPI {
    /**

     - parameter companyId: (query)  (optional)
     - parameter addressId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyAddressDelete(companyId: UUID? = nil, addressId: UUID? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            apiAppCompanyAddressDeleteWithRequestBuilder(companyId: companyId, addressId: addressId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/app/company/address
     - parameter companyId: (query)  (optional)
     - parameter addressId: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiAppCompanyAddressDeleteWithRequestBuilder(companyId: UUID? = nil, addressId: UUID? = nil) -> RequestBuilder<Void> {
        let path = "/api/app/company/address"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "companyId": companyId?.encodeToJSON(),
            "addressId": addressId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SixProApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter companyId: (query)  (optional)
     - parameter addressId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyAssignAddressPost(companyId: UUID? = nil, addressId: UUID? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            apiAppCompanyAssignAddressPostWithRequestBuilder(companyId: companyId, addressId: addressId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/company/assign-address
     - parameter companyId: (query)  (optional)
     - parameter addressId: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiAppCompanyAssignAddressPostWithRequestBuilder(companyId: UUID? = nil, addressId: UUID? = nil) -> RequestBuilder<Void> {
        let path = "/api/app/company/assign-address"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "companyId": companyId?.encodeToJSON(),
            "addressId": addressId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SixProApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter companyBannerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Data, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyCompanyBannerCompanyBannerIdGet(companyBannerId: UUID, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Data, Error> {
        return Future<Data, Error>.init { promise in
            apiAppCompanyCompanyBannerCompanyBannerIdGetWithRequestBuilder(companyBannerId: companyBannerId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/company/company-banner/{companyBannerId}
     - parameter companyBannerId: (path)  
     - returns: RequestBuilder<Data> 
     */
    open class func apiAppCompanyCompanyBannerCompanyBannerIdGetWithRequestBuilder(companyBannerId: UUID) -> RequestBuilder<Data> {
        var path = "/api/app/company/company-banner/{companyBannerId}"
        let companyBannerIdPreEscape = "\(APIHelper.mapValueToPathItem(companyBannerId))"
        let companyBannerIdPostEscape = companyBannerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{companyBannerId}", with: companyBannerIdPostEscape, options: .literal, range: nil)
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Data>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyCompanyBannerDelete(apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error>.init { promise in
            apiAppCompanyCompanyBannerDeleteWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/app/company/company-banner
     - returns: RequestBuilder<Bool> 
     */
    open class func apiAppCompanyCompanyBannerDeleteWithRequestBuilder() -> RequestBuilder<Bool> {
        let path = "/api/app/company/company-banner"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Bool>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includePublications: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedCompaniesDtosSimpleCompanyDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyCompanyByIdGet(id: UUID? = nil, includeCategories: Bool? = nil, includePublications: Bool? = nil, includeAddress: Bool? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedCompaniesDtosSimpleCompanyDto, Error> {
        return Future<SixLinkedCompaniesDtosSimpleCompanyDto, Error>.init { promise in
            apiAppCompanyCompanyByIdGetWithRequestBuilder(id: id, includeCategories: includeCategories, includePublications: includePublications, includeAddress: includeAddress).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/company/company-by-id
     - parameter id: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includePublications: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - returns: RequestBuilder<SixLinkedCompaniesDtosSimpleCompanyDto> 
     */
    open class func apiAppCompanyCompanyByIdGetWithRequestBuilder(id: UUID? = nil, includeCategories: Bool? = nil, includePublications: Bool? = nil, includeAddress: Bool? = nil) -> RequestBuilder<SixLinkedCompaniesDtosSimpleCompanyDto> {
        let path = "/api/app/company/company-by-id"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": id?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludePublications": includePublications?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedCompaniesDtosSimpleCompanyDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter slug: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includePublications: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedCompaniesDtosSimpleCompanyDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyCompanyBySlugGet(slug: String? = nil, includeCategories: Bool? = nil, includePublications: Bool? = nil, includeAddress: Bool? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedCompaniesDtosSimpleCompanyDto, Error> {
        return Future<SixLinkedCompaniesDtosSimpleCompanyDto, Error>.init { promise in
            apiAppCompanyCompanyBySlugGetWithRequestBuilder(slug: slug, includeCategories: includeCategories, includePublications: includePublications, includeAddress: includeAddress).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/company/company-by-slug
     - parameter slug: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includePublications: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - returns: RequestBuilder<SixLinkedCompaniesDtosSimpleCompanyDto> 
     */
    open class func apiAppCompanyCompanyBySlugGetWithRequestBuilder(slug: String? = nil, includeCategories: Bool? = nil, includePublications: Bool? = nil, includeAddress: Bool? = nil) -> RequestBuilder<SixLinkedCompaniesDtosSimpleCompanyDto> {
        let path = "/api/app/company/company-by-slug"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Slug": slug?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludePublications": includePublications?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedCompaniesDtosSimpleCompanyDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter companyLogoId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Data, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyCompanyLogoCompanyLogoIdGet(companyLogoId: UUID, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Data, Error> {
        return Future<Data, Error>.init { promise in
            apiAppCompanyCompanyLogoCompanyLogoIdGetWithRequestBuilder(companyLogoId: companyLogoId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/company/company-logo/{companyLogoId}
     - parameter companyLogoId: (path)  
     - returns: RequestBuilder<Data> 
     */
    open class func apiAppCompanyCompanyLogoCompanyLogoIdGetWithRequestBuilder(companyLogoId: UUID) -> RequestBuilder<Data> {
        var path = "/api/app/company/company-logo/{companyLogoId}"
        let companyLogoIdPreEscape = "\(APIHelper.mapValueToPathItem(companyLogoId))"
        let companyLogoIdPostEscape = companyLogoIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{companyLogoId}", with: companyLogoIdPostEscape, options: .literal, range: nil)
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Data>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyCompanyLogoDelete(apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error>.init { promise in
            apiAppCompanyCompanyLogoDeleteWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/app/company/company-logo
     - returns: RequestBuilder<Bool> 
     */
    open class func apiAppCompanyCompanyLogoDeleteWithRequestBuilder() -> RequestBuilder<Bool> {
        let path = "/api/app/company/company-logo"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Bool>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter sixLinkedCompaniesDtosCreateNewCompanyDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedCompaniesDtosCompanyDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyCompanyPost(sixLinkedCompaniesDtosCreateNewCompanyDto: SixLinkedCompaniesDtosCreateNewCompanyDto? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedCompaniesDtosCompanyDto, Error> {
        return Future<SixLinkedCompaniesDtosCompanyDto, Error>.init { promise in
            apiAppCompanyCompanyPostWithRequestBuilder(sixLinkedCompaniesDtosCreateNewCompanyDto: sixLinkedCompaniesDtosCreateNewCompanyDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/company/company
     - parameter sixLinkedCompaniesDtosCreateNewCompanyDto: (body)  (optional)
     - returns: RequestBuilder<SixLinkedCompaniesDtosCompanyDto> 
     */
    open class func apiAppCompanyCompanyPostWithRequestBuilder(sixLinkedCompaniesDtosCreateNewCompanyDto: SixLinkedCompaniesDtosCreateNewCompanyDto? = nil) -> RequestBuilder<SixLinkedCompaniesDtosCompanyDto> {
        let path = "/api/app/company/company"
        let URLString = SixProApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sixLinkedCompaniesDtosCreateNewCompanyDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedCompaniesDtosCompanyDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter isVerified: (query)  (optional)
     - parameter categories: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includePublications: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedCompaniesDtosSimpleCompanyDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyGet(isVerified: Bool? = nil, categories: [UUID]? = nil, includeCategories: Bool? = nil, includePublications: Bool? = nil, includeAddress: Bool? = nil, filter: String? = nil, sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedCompaniesDtosSimpleCompanyDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error> {
        return Future<VoloAbpApplicationDtosPagedResultDto1SixLinkedCompaniesDtosSimpleCompanyDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>.init { promise in
            apiAppCompanyGetWithRequestBuilder(isVerified: isVerified, categories: categories, includeCategories: includeCategories, includePublications: includePublications, includeAddress: includeAddress, filter: filter, sorting: sorting, skipCount: skipCount, maxResultCount: maxResultCount).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/company
     - parameter isVerified: (query)  (optional)
     - parameter categories: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includePublications: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - returns: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedCompaniesDtosSimpleCompanyDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> 
     */
    open class func apiAppCompanyGetWithRequestBuilder(isVerified: Bool? = nil, categories: [UUID]? = nil, includeCategories: Bool? = nil, includePublications: Bool? = nil, includeAddress: Bool? = nil, filter: String? = nil, sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil) -> RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedCompaniesDtosSimpleCompanyDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> {
        let path = "/api/app/company"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "IsVerified": isVerified?.encodeToJSON(),
            "Categories": categories?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludePublications": includePublications?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
            "Filter": filter?.encodeToJSON(),
            "Sorting": sorting?.encodeToJSON(),
            "SkipCount": skipCount?.encodeToJSON(),
            "MaxResultCount": maxResultCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedCompaniesDtosSimpleCompanyDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedCompaniesDtosCompanyDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanyOwnCompanyGet(apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedCompaniesDtosCompanyDto, Error> {
        return Future<SixLinkedCompaniesDtosCompanyDto, Error>.init { promise in
            apiAppCompanyOwnCompanyGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/company/own-company
     - returns: RequestBuilder<SixLinkedCompaniesDtosCompanyDto> 
     */
    open class func apiAppCompanyOwnCompanyGetWithRequestBuilder() -> RequestBuilder<SixLinkedCompaniesDtosCompanyDto> {
        let path = "/api/app/company/own-company"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedCompaniesDtosCompanyDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<UUID, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanySaveCompanyBannerPost(body: Data? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<UUID, Error> {
        return Future<UUID, Error>.init { promise in
            apiAppCompanySaveCompanyBannerPostWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/company/save-company-banner
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<UUID> 
     */
    open class func apiAppCompanySaveCompanyBannerPostWithRequestBuilder(body: Data? = nil) -> RequestBuilder<UUID> {
        let path = "/api/app/company/save-company-banner"
        let URLString = SixProApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UUID>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<UUID, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppCompanySaveCompanyLogoPost(body: Data? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<UUID, Error> {
        return Future<UUID, Error>.init { promise in
            apiAppCompanySaveCompanyLogoPostWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/company/save-company-logo
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<UUID> 
     */
    open class func apiAppCompanySaveCompanyLogoPostWithRequestBuilder(body: Data? = nil) -> RequestBuilder<UUID> {
        let path = "/api/app/company/save-company-logo"
        let URLString = SixProApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UUID>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
