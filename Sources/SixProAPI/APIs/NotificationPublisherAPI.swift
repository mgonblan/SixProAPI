//
// NotificationPublisherAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif

open class NotificationPublisherAPI {
    /**

     - parameter sixLinkedCompaniesCompany: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppNotificationPublisherSendNewCompanyNotificationsPost(sixLinkedCompaniesCompany: SixLinkedCompaniesCompany? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            apiAppNotificationPublisherSendNewCompanyNotificationsPostWithRequestBuilder(sixLinkedCompaniesCompany: sixLinkedCompaniesCompany).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/notification-publisher/send-new-company-notifications
     - parameter sixLinkedCompaniesCompany: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiAppNotificationPublisherSendNewCompanyNotificationsPostWithRequestBuilder(sixLinkedCompaniesCompany: SixLinkedCompaniesCompany? = nil) -> RequestBuilder<Void> {
        let path = "/api/app/notification-publisher/send-new-company-notifications"
        let URLString = SixProApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sixLinkedCompaniesCompany)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SixProApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter sixLinkedPublicationsPublication: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppNotificationPublisherSendNewPublicationNotificationsPost(sixLinkedPublicationsPublication: SixLinkedPublicationsPublication? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            apiAppNotificationPublisherSendNewPublicationNotificationsPostWithRequestBuilder(sixLinkedPublicationsPublication: sixLinkedPublicationsPublication).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/notification-publisher/send-new-publication-notifications
     - parameter sixLinkedPublicationsPublication: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiAppNotificationPublisherSendNewPublicationNotificationsPostWithRequestBuilder(sixLinkedPublicationsPublication: SixLinkedPublicationsPublication? = nil) -> RequestBuilder<Void> {
        let path = "/api/app/notification-publisher/send-new-publication-notifications"
        let URLString = SixProApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sixLinkedPublicationsPublication)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SixProApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter userName: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppNotificationPublisherSendNewUserNotificationsUserIdPost(userId: UUID, userName: String? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            apiAppNotificationPublisherSendNewUserNotificationsUserIdPostWithRequestBuilder(userId: userId, userName: userName).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/notification-publisher/send-new-user-notifications/{userId}
     - parameter userId: (path)  
     - parameter userName: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiAppNotificationPublisherSendNewUserNotificationsUserIdPostWithRequestBuilder(userId: UUID, userName: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/app/notification-publisher/send-new-user-notifications/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userName": userName?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SixProApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
