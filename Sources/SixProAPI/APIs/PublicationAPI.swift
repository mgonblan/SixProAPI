//
// PublicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif

open class PublicationAPI {
    /**

     - parameter publicationType: (query)  (optional)
     - parameter publicationStartDate: (query)  (optional)
     - parameter publicationEndDate: (query)  (optional)
     - parameter projectStartDate: (query)  (optional)
     - parameter projectEndDate: (query)  (optional)
     - parameter categoryId: (query)  (optional)
     - parameter provinceId: (query)  (optional)
     - parameter budgetType: (query)  (optional)
     - parameter minQuantity: (query)  (optional)
     - parameter maxQuantity: (query)  (optional)
     - parameter isVerified: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationAvailablePublicationsGet(publicationType: SixLinkedPublicationsPublicationType? = nil, publicationStartDate: Date? = nil, publicationEndDate: Date? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, categoryId: UUID? = nil, provinceId: UUID? = nil, budgetType: SixLinkedBudgetsBudgetType? = nil, minQuantity: Double? = nil, maxQuantity: Double? = nil, isVerified: Bool? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, filter: String? = nil, sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error> {
        return Future<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>.init { promise in
            apiAppPublicationAvailablePublicationsGetWithRequestBuilder(publicationType: publicationType, publicationStartDate: publicationStartDate, publicationEndDate: publicationEndDate, projectStartDate: projectStartDate, projectEndDate: projectEndDate, categoryId: categoryId, provinceId: provinceId, budgetType: budgetType, minQuantity: minQuantity, maxQuantity: maxQuantity, isVerified: isVerified, includeCompany: includeCompany, includeBudget: includeBudget, includeCategories: includeCategories, includeRequirements: includeRequirements, includeAddress: includeAddress, filter: filter, sorting: sorting, skipCount: skipCount, maxResultCount: maxResultCount).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication/available-publications
     - parameter publicationType: (query)  (optional)
     - parameter publicationStartDate: (query)  (optional)
     - parameter publicationEndDate: (query)  (optional)
     - parameter projectStartDate: (query)  (optional)
     - parameter projectEndDate: (query)  (optional)
     - parameter categoryId: (query)  (optional)
     - parameter provinceId: (query)  (optional)
     - parameter budgetType: (query)  (optional)
     - parameter minQuantity: (query)  (optional)
     - parameter maxQuantity: (query)  (optional)
     - parameter isVerified: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - returns: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> 
     */
    open class func apiAppPublicationAvailablePublicationsGetWithRequestBuilder(publicationType: SixLinkedPublicationsPublicationType? = nil, publicationStartDate: Date? = nil, publicationEndDate: Date? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, categoryId: UUID? = nil, provinceId: UUID? = nil, budgetType: SixLinkedBudgetsBudgetType? = nil, minQuantity: Double? = nil, maxQuantity: Double? = nil, isVerified: Bool? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, filter: String? = nil, sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil) -> RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> {
        let path = "/api/app/publication/available-publications"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "PublicationType": publicationType?.encodeToJSON(),
            "PublicationStartDate": publicationStartDate?.encodeToJSON(),
            "PublicationEndDate": publicationEndDate?.encodeToJSON(),
            "ProjectStartDate": projectStartDate?.encodeToJSON(),
            "ProjectEndDate": projectEndDate?.encodeToJSON(),
            "CategoryId": categoryId?.encodeToJSON(),
            "ProvinceId": provinceId?.encodeToJSON(),
            "BudgetType": budgetType?.encodeToJSON(),
            "MinQuantity": minQuantity?.encodeToJSON(),
            "MaxQuantity": maxQuantity?.encodeToJSON(),
            "IsVerified": isVerified?.encodeToJSON(),
            "IncludeCompany": includeCompany?.encodeToJSON(),
            "IncludeBudget": includeBudget?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludeRequirements": includeRequirements?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
            "Filter": filter?.encodeToJSON(),
            "Sorting": sorting?.encodeToJSON(),
            "SkipCount": skipCount?.encodeToJSON(),
            "MaxResultCount": maxResultCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter publicationId: (path)  
     - parameter requestBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationContactListVisibilityToPublicationPublicationIdPost(publicationId: UUID, requestBody: [UUID]? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            apiAppPublicationContactListVisibilityToPublicationPublicationIdPostWithRequestBuilder(publicationId: publicationId, requestBody: requestBody).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/publication/contact-list-visibility-to-publication/{publicationId}
     - parameter publicationId: (path)  
     - parameter requestBody: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiAppPublicationContactListVisibilityToPublicationPublicationIdPostWithRequestBuilder(publicationId: UUID, requestBody: [UUID]? = nil) -> RequestBuilder<Void> {
        var path = "/api/app/publication/contact-list-visibility-to-publication/{publicationId}"
        let publicationIdPreEscape = "\(APIHelper.mapValueToPathItem(publicationId))"
        let publicationIdPostEscape = publicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{publicationId}", with: publicationIdPostEscape, options: .literal, range: nil)
        let URLString = SixProApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SixProApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter publicationId: (query)  (optional)
     - parameter contactId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationContactVisibilityToPublicationPost(publicationId: UUID? = nil, contactId: UUID? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            apiAppPublicationContactVisibilityToPublicationPostWithRequestBuilder(publicationId: publicationId, contactId: contactId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/publication/contact-visibility-to-publication
     - parameter publicationId: (query)  (optional)
     - parameter contactId: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiAppPublicationContactVisibilityToPublicationPostWithRequestBuilder(publicationId: UUID? = nil, contactId: UUID? = nil) -> RequestBuilder<Void> {
        let path = "/api/app/publication/contact-visibility-to-publication"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "publicationId": publicationId?.encodeToJSON(),
            "contactId": contactId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SixProApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationGet(sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error> {
        return Future<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>.init { promise in
            apiAppPublicationGetWithRequestBuilder(sorting: sorting, skipCount: skipCount, maxResultCount: maxResultCount).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - returns: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> 
     */
    open class func apiAppPublicationGetWithRequestBuilder(sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil) -> RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> {
        let path = "/api/app/publication"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Sorting": sorting?.encodeToJSON(),
            "SkipCount": skipCount?.encodeToJSON(),
            "MaxResultCount": maxResultCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationIdDelete(id: UUID, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            apiAppPublicationIdDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/app/publication/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiAppPublicationIdDeleteWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var path = "/api/app/publication/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SixProApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationIdGet(id: UUID, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error> {
        return Future<SixLinkedPublicationsDtosPublicationDto, Error>.init { promise in
            apiAppPublicationIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<SixLinkedPublicationsDtosPublicationDto> 
     */
    open class func apiAppPublicationIdGetWithRequestBuilder(id: UUID) -> RequestBuilder<SixLinkedPublicationsDtosPublicationDto> {
        var path = "/api/app/publication/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedPublicationsDtosPublicationDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter sixLinkedPublicationsDtosCreateUpdatePublicationDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationIdPut(id: UUID, sixLinkedPublicationsDtosCreateUpdatePublicationDto: SixLinkedPublicationsDtosCreateUpdatePublicationDto? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error> {
        return Future<SixLinkedPublicationsDtosPublicationDto, Error>.init { promise in
            apiAppPublicationIdPutWithRequestBuilder(id: id, sixLinkedPublicationsDtosCreateUpdatePublicationDto: sixLinkedPublicationsDtosCreateUpdatePublicationDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - PUT /api/app/publication/{id}
     - parameter id: (path)  
     - parameter sixLinkedPublicationsDtosCreateUpdatePublicationDto: (body)  (optional)
     - returns: RequestBuilder<SixLinkedPublicationsDtosPublicationDto> 
     */
    open class func apiAppPublicationIdPutWithRequestBuilder(id: UUID, sixLinkedPublicationsDtosCreateUpdatePublicationDto: SixLinkedPublicationsDtosCreateUpdatePublicationDto? = nil) -> RequestBuilder<SixLinkedPublicationsDtosPublicationDto> {
        var path = "/api/app/publication/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SixProApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sixLinkedPublicationsDtosCreateUpdatePublicationDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedPublicationsDtosPublicationDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationOwnPublicationByIdGet(id: UUID? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error> {
        return Future<SixLinkedPublicationsDtosPublicationDto, Error>.init { promise in
            apiAppPublicationOwnPublicationByIdGetWithRequestBuilder(id: id, includeCompany: includeCompany, includeBudget: includeBudget, includeCategories: includeCategories, includeRequirements: includeRequirements, includeAddress: includeAddress).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication/own-publication-by-id
     - parameter id: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - returns: RequestBuilder<SixLinkedPublicationsDtosPublicationDto> 
     */
    open class func apiAppPublicationOwnPublicationByIdGetWithRequestBuilder(id: UUID? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil) -> RequestBuilder<SixLinkedPublicationsDtosPublicationDto> {
        let path = "/api/app/publication/own-publication-by-id"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": id?.encodeToJSON(),
            "IncludeCompany": includeCompany?.encodeToJSON(),
            "IncludeBudget": includeBudget?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludeRequirements": includeRequirements?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedPublicationsDtosPublicationDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter slug: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationOwnPublicationBySlugGet(slug: String? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error> {
        return Future<SixLinkedPublicationsDtosPublicationDto, Error>.init { promise in
            apiAppPublicationOwnPublicationBySlugGetWithRequestBuilder(slug: slug, includeCompany: includeCompany, includeBudget: includeBudget, includeCategories: includeCategories, includeRequirements: includeRequirements, includeAddress: includeAddress).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication/own-publication-by-slug
     - parameter slug: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - returns: RequestBuilder<SixLinkedPublicationsDtosPublicationDto> 
     */
    open class func apiAppPublicationOwnPublicationBySlugGetWithRequestBuilder(slug: String? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil) -> RequestBuilder<SixLinkedPublicationsDtosPublicationDto> {
        let path = "/api/app/publication/own-publication-by-slug"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Slug": slug?.encodeToJSON(),
            "IncludeCompany": includeCompany?.encodeToJSON(),
            "IncludeBudget": includeBudget?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludeRequirements": includeRequirements?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedPublicationsDtosPublicationDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter publicationType: (query)  (optional)
     - parameter publicationStartDate: (query)  (optional)
     - parameter publicationEndDate: (query)  (optional)
     - parameter projectStartDate: (query)  (optional)
     - parameter projectEndDate: (query)  (optional)
     - parameter categoryId: (query)  (optional)
     - parameter provinceId: (query)  (optional)
     - parameter budgetType: (query)  (optional)
     - parameter minQuantity: (query)  (optional)
     - parameter maxQuantity: (query)  (optional)
     - parameter isVerified: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationOwnPublicationsGet(publicationType: SixLinkedPublicationsPublicationType? = nil, publicationStartDate: Date? = nil, publicationEndDate: Date? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, categoryId: UUID? = nil, provinceId: UUID? = nil, budgetType: SixLinkedBudgetsBudgetType? = nil, minQuantity: Double? = nil, maxQuantity: Double? = nil, isVerified: Bool? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, filter: String? = nil, sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error> {
        return Future<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>.init { promise in
            apiAppPublicationOwnPublicationsGetWithRequestBuilder(publicationType: publicationType, publicationStartDate: publicationStartDate, publicationEndDate: publicationEndDate, projectStartDate: projectStartDate, projectEndDate: projectEndDate, categoryId: categoryId, provinceId: provinceId, budgetType: budgetType, minQuantity: minQuantity, maxQuantity: maxQuantity, isVerified: isVerified, includeCompany: includeCompany, includeBudget: includeBudget, includeCategories: includeCategories, includeRequirements: includeRequirements, includeAddress: includeAddress, filter: filter, sorting: sorting, skipCount: skipCount, maxResultCount: maxResultCount).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication/own-publications
     - parameter publicationType: (query)  (optional)
     - parameter publicationStartDate: (query)  (optional)
     - parameter publicationEndDate: (query)  (optional)
     - parameter projectStartDate: (query)  (optional)
     - parameter projectEndDate: (query)  (optional)
     - parameter categoryId: (query)  (optional)
     - parameter provinceId: (query)  (optional)
     - parameter budgetType: (query)  (optional)
     - parameter minQuantity: (query)  (optional)
     - parameter maxQuantity: (query)  (optional)
     - parameter isVerified: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - returns: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> 
     */
    open class func apiAppPublicationOwnPublicationsGetWithRequestBuilder(publicationType: SixLinkedPublicationsPublicationType? = nil, publicationStartDate: Date? = nil, publicationEndDate: Date? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, categoryId: UUID? = nil, provinceId: UUID? = nil, budgetType: SixLinkedBudgetsBudgetType? = nil, minQuantity: Double? = nil, maxQuantity: Double? = nil, isVerified: Bool? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, filter: String? = nil, sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil) -> RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> {
        let path = "/api/app/publication/own-publications"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "PublicationType": publicationType?.encodeToJSON(),
            "PublicationStartDate": publicationStartDate?.encodeToJSON(),
            "PublicationEndDate": publicationEndDate?.encodeToJSON(),
            "ProjectStartDate": projectStartDate?.encodeToJSON(),
            "ProjectEndDate": projectEndDate?.encodeToJSON(),
            "CategoryId": categoryId?.encodeToJSON(),
            "ProvinceId": provinceId?.encodeToJSON(),
            "BudgetType": budgetType?.encodeToJSON(),
            "MinQuantity": minQuantity?.encodeToJSON(),
            "MaxQuantity": maxQuantity?.encodeToJSON(),
            "IsVerified": isVerified?.encodeToJSON(),
            "IncludeCompany": includeCompany?.encodeToJSON(),
            "IncludeBudget": includeBudget?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludeRequirements": includeRequirements?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
            "Filter": filter?.encodeToJSON(),
            "Sorting": sorting?.encodeToJSON(),
            "SkipCount": skipCount?.encodeToJSON(),
            "MaxResultCount": maxResultCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter sixLinkedPublicationsDtosCreateUpdatePublicationDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationPost(sixLinkedPublicationsDtosCreateUpdatePublicationDto: SixLinkedPublicationsDtosCreateUpdatePublicationDto? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedPublicationsDtosPublicationDto, Error> {
        return Future<SixLinkedPublicationsDtosPublicationDto, Error>.init { promise in
            apiAppPublicationPostWithRequestBuilder(sixLinkedPublicationsDtosCreateUpdatePublicationDto: sixLinkedPublicationsDtosCreateUpdatePublicationDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/app/publication
     - parameter sixLinkedPublicationsDtosCreateUpdatePublicationDto: (body)  (optional)
     - returns: RequestBuilder<SixLinkedPublicationsDtosPublicationDto> 
     */
    open class func apiAppPublicationPostWithRequestBuilder(sixLinkedPublicationsDtosCreateUpdatePublicationDto: SixLinkedPublicationsDtosCreateUpdatePublicationDto? = nil) -> RequestBuilder<SixLinkedPublicationsDtosPublicationDto> {
        let path = "/api/app/publication"
        let URLString = SixProApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sixLinkedPublicationsDtosCreateUpdatePublicationDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedPublicationsDtosPublicationDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter publicationType: (query)  (optional)
     - parameter publicationStartDate: (query)  (optional)
     - parameter publicationEndDate: (query)  (optional)
     - parameter projectStartDate: (query)  (optional)
     - parameter projectEndDate: (query)  (optional)
     - parameter categoryId: (query)  (optional)
     - parameter provinceId: (query)  (optional)
     - parameter budgetType: (query)  (optional)
     - parameter minQuantity: (query)  (optional)
     - parameter maxQuantity: (query)  (optional)
     - parameter isVerified: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationPublicPublicationsGet(publicationType: SixLinkedPublicationsPublicationType? = nil, publicationStartDate: Date? = nil, publicationEndDate: Date? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, categoryId: UUID? = nil, provinceId: UUID? = nil, budgetType: SixLinkedBudgetsBudgetType? = nil, minQuantity: Double? = nil, maxQuantity: Double? = nil, isVerified: Bool? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, filter: String? = nil, sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error> {
        return Future<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull, Error>.init { promise in
            apiAppPublicationPublicPublicationsGetWithRequestBuilder(publicationType: publicationType, publicationStartDate: publicationStartDate, publicationEndDate: publicationEndDate, projectStartDate: projectStartDate, projectEndDate: projectEndDate, categoryId: categoryId, provinceId: provinceId, budgetType: budgetType, minQuantity: minQuantity, maxQuantity: maxQuantity, isVerified: isVerified, includeCompany: includeCompany, includeBudget: includeBudget, includeCategories: includeCategories, includeRequirements: includeRequirements, includeAddress: includeAddress, filter: filter, sorting: sorting, skipCount: skipCount, maxResultCount: maxResultCount).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication/public-publications
     - parameter publicationType: (query)  (optional)
     - parameter publicationStartDate: (query)  (optional)
     - parameter publicationEndDate: (query)  (optional)
     - parameter projectStartDate: (query)  (optional)
     - parameter projectEndDate: (query)  (optional)
     - parameter categoryId: (query)  (optional)
     - parameter provinceId: (query)  (optional)
     - parameter budgetType: (query)  (optional)
     - parameter minQuantity: (query)  (optional)
     - parameter maxQuantity: (query)  (optional)
     - parameter isVerified: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter skipCount: (query)  (optional)
     - parameter maxResultCount: (query)  (optional)
     - returns: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> 
     */
    open class func apiAppPublicationPublicPublicationsGetWithRequestBuilder(publicationType: SixLinkedPublicationsPublicationType? = nil, publicationStartDate: Date? = nil, publicationEndDate: Date? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, categoryId: UUID? = nil, provinceId: UUID? = nil, budgetType: SixLinkedBudgetsBudgetType? = nil, minQuantity: Double? = nil, maxQuantity: Double? = nil, isVerified: Bool? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, filter: String? = nil, sorting: String? = nil, skipCount: Int? = nil, maxResultCount: Int? = nil) -> RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull> {
        let path = "/api/app/publication/public-publications"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "PublicationType": publicationType?.encodeToJSON(),
            "PublicationStartDate": publicationStartDate?.encodeToJSON(),
            "PublicationEndDate": publicationEndDate?.encodeToJSON(),
            "ProjectStartDate": projectStartDate?.encodeToJSON(),
            "ProjectEndDate": projectEndDate?.encodeToJSON(),
            "CategoryId": categoryId?.encodeToJSON(),
            "ProvinceId": provinceId?.encodeToJSON(),
            "BudgetType": budgetType?.encodeToJSON(),
            "MinQuantity": minQuantity?.encodeToJSON(),
            "MaxQuantity": maxQuantity?.encodeToJSON(),
            "IsVerified": isVerified?.encodeToJSON(),
            "IncludeCompany": includeCompany?.encodeToJSON(),
            "IncludeBudget": includeBudget?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludeRequirements": includeRequirements?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
            "Filter": filter?.encodeToJSON(),
            "Sorting": sorting?.encodeToJSON(),
            "SkipCount": skipCount?.encodeToJSON(),
            "MaxResultCount": maxResultCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VoloAbpApplicationDtosPagedResultDto1SixLinkedPublicationsDtosPublicPublicationDtoSixLinkedApplicationContractsVersion1000CultureneutralPublicKeyTokennull>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedPublicationsDtosPublicPublicationDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationPublicationByIdGet(id: UUID? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedPublicationsDtosPublicPublicationDto, Error> {
        return Future<SixLinkedPublicationsDtosPublicPublicationDto, Error>.init { promise in
            apiAppPublicationPublicationByIdGetWithRequestBuilder(id: id, includeCompany: includeCompany, includeBudget: includeBudget, includeCategories: includeCategories, includeRequirements: includeRequirements, includeAddress: includeAddress).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication/publication-by-id
     - parameter id: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - returns: RequestBuilder<SixLinkedPublicationsDtosPublicPublicationDto> 
     */
    open class func apiAppPublicationPublicationByIdGetWithRequestBuilder(id: UUID? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil) -> RequestBuilder<SixLinkedPublicationsDtosPublicPublicationDto> {
        let path = "/api/app/publication/publication-by-id"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": id?.encodeToJSON(),
            "IncludeCompany": includeCompany?.encodeToJSON(),
            "IncludeBudget": includeBudget?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludeRequirements": includeRequirements?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedPublicationsDtosPublicPublicationDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter slug: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SixLinkedPublicationsDtosPublicPublicationDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiAppPublicationPublicationBySlugGet(slug: String? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil, apiResponseQueue: DispatchQueue = SixProApiAPI.apiResponseQueue) -> AnyPublisher<SixLinkedPublicationsDtosPublicPublicationDto, Error> {
        return Future<SixLinkedPublicationsDtosPublicPublicationDto, Error>.init { promise in
            apiAppPublicationPublicationBySlugGetWithRequestBuilder(slug: slug, includeCompany: includeCompany, includeBudget: includeBudget, includeCategories: includeCategories, includeRequirements: includeRequirements, includeAddress: includeAddress).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/app/publication/publication-by-slug
     - parameter slug: (query)  (optional)
     - parameter includeCompany: (query)  (optional)
     - parameter includeBudget: (query)  (optional)
     - parameter includeCategories: (query)  (optional)
     - parameter includeRequirements: (query)  (optional)
     - parameter includeAddress: (query)  (optional)
     - returns: RequestBuilder<SixLinkedPublicationsDtosPublicPublicationDto> 
     */
    open class func apiAppPublicationPublicationBySlugGetWithRequestBuilder(slug: String? = nil, includeCompany: Bool? = nil, includeBudget: Bool? = nil, includeCategories: Bool? = nil, includeRequirements: Bool? = nil, includeAddress: Bool? = nil) -> RequestBuilder<SixLinkedPublicationsDtosPublicPublicationDto> {
        let path = "/api/app/publication/publication-by-slug"
        let URLString = SixProApiAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Slug": slug?.encodeToJSON(),
            "IncludeCompany": includeCompany?.encodeToJSON(),
            "IncludeBudget": includeBudget?.encodeToJSON(),
            "IncludeCategories": includeCategories?.encodeToJSON(),
            "IncludeRequirements": includeRequirements?.encodeToJSON(),
            "IncludeAddress": includeAddress?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SixLinkedPublicationsDtosPublicPublicationDto>.Type = SixProApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
