//
// SixLinkedProfilesDtosCreateUpdateProfileDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedProfilesDtosCreateUpdateProfileDto: Codable, Hashable {

    public var userId: UUID?
    public var jobTitle: String?
    public var shortBio: String?
    public var slug: String?
    public var isVerified: Bool?
    public var isPublic: Bool?
    public var categoryId: UUID?
    public var category: SixLinkedCategoriesDtosCategoryDto?
    public var addressId: UUID?
    public var address: SixLinkedAddressesDtosAddressDto?

    public init(userId: UUID? = nil, jobTitle: String? = nil, shortBio: String? = nil, slug: String? = nil, isVerified: Bool? = nil, isPublic: Bool? = nil, categoryId: UUID? = nil, category: SixLinkedCategoriesDtosCategoryDto? = nil, addressId: UUID? = nil, address: SixLinkedAddressesDtosAddressDto? = nil) {
        self.userId = userId
        self.jobTitle = jobTitle
        self.shortBio = shortBio
        self.slug = slug
        self.isVerified = isVerified
        self.isPublic = isPublic
        self.categoryId = categoryId
        self.category = category
        self.addressId = addressId
        self.address = address
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case jobTitle
        case shortBio
        case slug
        case isVerified
        case isPublic
        case categoryId
        case category
        case addressId
        case address
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(jobTitle, forKey: .jobTitle)
        try container.encodeIfPresent(shortBio, forKey: .shortBio)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(isVerified, forKey: .isVerified)
        try container.encodeIfPresent(isPublic, forKey: .isPublic)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(addressId, forKey: .addressId)
        try container.encodeIfPresent(address, forKey: .address)
    }



}
