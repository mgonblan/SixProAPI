//
// VoloAbpFeatureManagementFeatureDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct VoloAbpFeatureManagementFeatureDto: Codable, Hashable {

    public var name: String?
    public var displayName: String?
    public var value: String?
    public var provider: VoloAbpFeatureManagementFeatureProviderDto?
    public var description: String?
    public var valueType: VoloAbpValidationStringValuesIStringValueType?
    public var depth: Int?
    public var parentName: String?

    public init(name: String? = nil, displayName: String? = nil, value: String? = nil, provider: VoloAbpFeatureManagementFeatureProviderDto? = nil, description: String? = nil, valueType: VoloAbpValidationStringValuesIStringValueType? = nil, depth: Int? = nil, parentName: String? = nil) {
        self.name = name
        self.displayName = displayName
        self.value = value
        self.provider = provider
        self.description = description
        self.valueType = valueType
        self.depth = depth
        self.parentName = parentName
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case displayName
        case value
        case provider
        case description
        case valueType
        case depth
        case parentName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(valueType, forKey: .valueType)
        try container.encodeIfPresent(depth, forKey: .depth)
        try container.encodeIfPresent(parentName, forKey: .parentName)
    }



}
