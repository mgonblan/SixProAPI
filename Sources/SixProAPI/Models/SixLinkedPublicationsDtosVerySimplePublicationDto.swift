//
// SixLinkedPublicationsDtosVerySimplePublicationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedPublicationsDtosVerySimplePublicationDto: Codable, Hashable {

    public var id: UUID?
    public var slug: String?
    public var budget: SixLinkedBudgetsDtosSimpleBudgetDto?
    public var category: SixLinkedCompaniesDtosSimpleCategoryDto?
    public var title: String?
    public var description: String?
    public var publicationStartDate: Date?
    public var publicationEndDate: Date?
    public var projectStartDate: Date?
    public var projectEndDate: Date?
    public var isAnonymous: Bool?
    public var status: SixLinkedPublicationsStatus?
    public var visibilityType: SixLinkedPublicationsVisibilityType?
    public var publicationType: SixLinkedPublicationsPublicationType?

    public init(id: UUID? = nil, slug: String? = nil, budget: SixLinkedBudgetsDtosSimpleBudgetDto? = nil, category: SixLinkedCompaniesDtosSimpleCategoryDto? = nil, title: String? = nil, description: String? = nil, publicationStartDate: Date? = nil, publicationEndDate: Date? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, isAnonymous: Bool? = nil, status: SixLinkedPublicationsStatus? = nil, visibilityType: SixLinkedPublicationsVisibilityType? = nil, publicationType: SixLinkedPublicationsPublicationType? = nil) {
        self.id = id
        self.slug = slug
        self.budget = budget
        self.category = category
        self.title = title
        self.description = description
        self.publicationStartDate = publicationStartDate
        self.publicationEndDate = publicationEndDate
        self.projectStartDate = projectStartDate
        self.projectEndDate = projectEndDate
        self.isAnonymous = isAnonymous
        self.status = status
        self.visibilityType = visibilityType
        self.publicationType = publicationType
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case slug
        case budget
        case category
        case title
        case description
        case publicationStartDate
        case publicationEndDate
        case projectStartDate
        case projectEndDate
        case isAnonymous
        case status
        case visibilityType
        case publicationType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(budget, forKey: .budget)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(publicationStartDate, forKey: .publicationStartDate)
        try container.encodeIfPresent(publicationEndDate, forKey: .publicationEndDate)
        try container.encodeIfPresent(projectStartDate, forKey: .projectStartDate)
        try container.encodeIfPresent(projectEndDate, forKey: .projectEndDate)
        try container.encodeIfPresent(isAnonymous, forKey: .isAnonymous)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(visibilityType, forKey: .visibilityType)
        try container.encodeIfPresent(publicationType, forKey: .publicationType)
    }



}
