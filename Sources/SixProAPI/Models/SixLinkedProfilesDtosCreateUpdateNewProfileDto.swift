//
// SixLinkedProfilesDtosCreateUpdateNewProfileDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedProfilesDtosCreateUpdateNewProfileDto: Codable, Hashable {

    public var jobTitle: String?
    public var shortBio: String?
    public var isPublic: Bool?
    public var categoryId: UUID?
    public var category: SixLinkedCategoriesDtosCategoryDto?
    public var addressId: UUID?
    public var address: SixLinkedAddressesDtosAddressDto?
    public var studies: [SixLinkedStudiesDtosStudyDto]?
    public var languages: [SixLinkedProfilesDtosProfileLanguageDto]?
    public var workExperiences: [SixLinkedWorkExperiencesDtosWorkExperienceDto]?
    public var skillItems: [String]?

    public init(jobTitle: String? = nil, shortBio: String? = nil, isPublic: Bool? = nil, categoryId: UUID? = nil, category: SixLinkedCategoriesDtosCategoryDto? = nil, addressId: UUID? = nil, address: SixLinkedAddressesDtosAddressDto? = nil, studies: [SixLinkedStudiesDtosStudyDto]? = nil, languages: [SixLinkedProfilesDtosProfileLanguageDto]? = nil, workExperiences: [SixLinkedWorkExperiencesDtosWorkExperienceDto]? = nil, skillItems: [String]? = nil) {
        self.jobTitle = jobTitle
        self.shortBio = shortBio
        self.isPublic = isPublic
        self.categoryId = categoryId
        self.category = category
        self.addressId = addressId
        self.address = address
        self.studies = studies
        self.languages = languages
        self.workExperiences = workExperiences
        self.skillItems = skillItems
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case jobTitle
        case shortBio
        case isPublic
        case categoryId
        case category
        case addressId
        case address
        case studies
        case languages
        case workExperiences
        case skillItems
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(jobTitle, forKey: .jobTitle)
        try container.encodeIfPresent(shortBio, forKey: .shortBio)
        try container.encodeIfPresent(isPublic, forKey: .isPublic)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(addressId, forKey: .addressId)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(studies, forKey: .studies)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(workExperiences, forKey: .workExperiences)
        try container.encodeIfPresent(skillItems, forKey: .skillItems)
    }



}
