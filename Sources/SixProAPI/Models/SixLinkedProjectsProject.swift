//
// SixLinkedProjectsProject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedProjectsProject: Codable, Hashable {

    public var id: UUID?
    public var extraProperties: [String: AnyCodable]?
    public var concurrencyStamp: String?
    public var creationTime: Date?
    public var creatorId: UUID?
    public var lastModificationTime: Date?
    public var lastModifierId: UUID?
    public var isDeleted: Bool?
    public var deleterId: UUID?
    public var deletionTime: Date?
    public var tenantId: UUID?
    public var company: SixLinkedCompaniesCompany?
    public var companyId: UUID?
    public var publication: SixLinkedPublicationsPublication?
    public var publicationId: UUID?
    public var category: SixLinkedCategoriesCategory?
    public var categoryId: UUID?
    public var title: String?
    public var description: String?
    public var content: String?
    public var projectStartDate: Date?
    public var projectEndDate: Date?
    public var status: SixLinkedProjectsProjectStatus?
    public var tasks: [SixLinkedTasksTask]?
    public var participants: [SixLinkedProjectsProjectParticipant]?

    public init(id: UUID? = nil, extraProperties: [String: AnyCodable]? = nil, concurrencyStamp: String? = nil, creationTime: Date? = nil, creatorId: UUID? = nil, lastModificationTime: Date? = nil, lastModifierId: UUID? = nil, isDeleted: Bool? = nil, deleterId: UUID? = nil, deletionTime: Date? = nil, tenantId: UUID? = nil, company: SixLinkedCompaniesCompany? = nil, companyId: UUID? = nil, publication: SixLinkedPublicationsPublication? = nil, publicationId: UUID? = nil, category: SixLinkedCategoriesCategory? = nil, categoryId: UUID? = nil, title: String? = nil, description: String? = nil, content: String? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, status: SixLinkedProjectsProjectStatus? = nil, tasks: [SixLinkedTasksTask]? = nil, participants: [SixLinkedProjectsProjectParticipant]? = nil) {
        self.id = id
        self.extraProperties = extraProperties
        self.concurrencyStamp = concurrencyStamp
        self.creationTime = creationTime
        self.creatorId = creatorId
        self.lastModificationTime = lastModificationTime
        self.lastModifierId = lastModifierId
        self.isDeleted = isDeleted
        self.deleterId = deleterId
        self.deletionTime = deletionTime
        self.tenantId = tenantId
        self.company = company
        self.companyId = companyId
        self.publication = publication
        self.publicationId = publicationId
        self.category = category
        self.categoryId = categoryId
        self.title = title
        self.description = description
        self.content = content
        self.projectStartDate = projectStartDate
        self.projectEndDate = projectEndDate
        self.status = status
        self.tasks = tasks
        self.participants = participants
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case extraProperties
        case concurrencyStamp
        case creationTime
        case creatorId
        case lastModificationTime
        case lastModifierId
        case isDeleted
        case deleterId
        case deletionTime
        case tenantId
        case company
        case companyId
        case publication
        case publicationId
        case category
        case categoryId
        case title
        case description
        case content
        case projectStartDate
        case projectEndDate
        case status
        case tasks
        case participants
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(extraProperties, forKey: .extraProperties)
        try container.encodeIfPresent(concurrencyStamp, forKey: .concurrencyStamp)
        try container.encodeIfPresent(creationTime, forKey: .creationTime)
        try container.encodeIfPresent(creatorId, forKey: .creatorId)
        try container.encodeIfPresent(lastModificationTime, forKey: .lastModificationTime)
        try container.encodeIfPresent(lastModifierId, forKey: .lastModifierId)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(deleterId, forKey: .deleterId)
        try container.encodeIfPresent(deletionTime, forKey: .deletionTime)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(companyId, forKey: .companyId)
        try container.encodeIfPresent(publication, forKey: .publication)
        try container.encodeIfPresent(publicationId, forKey: .publicationId)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(projectStartDate, forKey: .projectStartDate)
        try container.encodeIfPresent(projectEndDate, forKey: .projectEndDate)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(tasks, forKey: .tasks)
        try container.encodeIfPresent(participants, forKey: .participants)
    }



}
