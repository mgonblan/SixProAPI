//
// SixLinkedPublicationsDtosPublicPublicationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedPublicationsDtosPublicPublicationDto: Codable, Hashable {

    public var id: UUID?
    public var slug: String?
    public var creationTime: Date?
    public var company: SixLinkedCompaniesDtosVerySimpleCompanyDto?
    public var budget: SixLinkedBudgetsDtosBudgetDto?
    public var address: SixLinkedAddressesDtosAddressDto?
    public var category: SixLinkedCategoriesDtosCategoryDto?
    public var companyId: UUID?
    public var title: String?
    public var description: String?
    public var content: String?
    public var publicationStartDate: Date?
    public var publicationEndDate: Date?
    public var projectStartDate: Date?
    public var projectEndDate: Date?
    public var isPublic: Bool?
    public var isAnonymous: Bool?
    public var categoryId: UUID?
    public var addressId: UUID?
    public var status: SixLinkedPublicationsStatus?
    public var visibilityType: SixLinkedPublicationsVisibilityType?
    public var publicationType: SixLinkedPublicationsPublicationType?
    public var budgetId: UUID?
    public var requirements: [SixLinkedRequirementsDtosRequirementDto]?

    public init(id: UUID? = nil, slug: String? = nil, creationTime: Date? = nil, company: SixLinkedCompaniesDtosVerySimpleCompanyDto? = nil, budget: SixLinkedBudgetsDtosBudgetDto? = nil, address: SixLinkedAddressesDtosAddressDto? = nil, category: SixLinkedCategoriesDtosCategoryDto? = nil, companyId: UUID? = nil, title: String? = nil, description: String? = nil, content: String? = nil, publicationStartDate: Date? = nil, publicationEndDate: Date? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, isPublic: Bool? = nil, isAnonymous: Bool? = nil, categoryId: UUID? = nil, addressId: UUID? = nil, status: SixLinkedPublicationsStatus? = nil, visibilityType: SixLinkedPublicationsVisibilityType? = nil, publicationType: SixLinkedPublicationsPublicationType? = nil, budgetId: UUID? = nil, requirements: [SixLinkedRequirementsDtosRequirementDto]? = nil) {
        self.id = id
        self.slug = slug
        self.creationTime = creationTime
        self.company = company
        self.budget = budget
        self.address = address
        self.category = category
        self.companyId = companyId
        self.title = title
        self.description = description
        self.content = content
        self.publicationStartDate = publicationStartDate
        self.publicationEndDate = publicationEndDate
        self.projectStartDate = projectStartDate
        self.projectEndDate = projectEndDate
        self.isPublic = isPublic
        self.isAnonymous = isAnonymous
        self.categoryId = categoryId
        self.addressId = addressId
        self.status = status
        self.visibilityType = visibilityType
        self.publicationType = publicationType
        self.budgetId = budgetId
        self.requirements = requirements
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case slug
        case creationTime
        case company
        case budget
        case address
        case category
        case companyId
        case title
        case description
        case content
        case publicationStartDate
        case publicationEndDate
        case projectStartDate
        case projectEndDate
        case isPublic
        case isAnonymous
        case categoryId
        case addressId
        case status
        case visibilityType
        case publicationType
        case budgetId
        case requirements
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(creationTime, forKey: .creationTime)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(budget, forKey: .budget)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(companyId, forKey: .companyId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(publicationStartDate, forKey: .publicationStartDate)
        try container.encodeIfPresent(publicationEndDate, forKey: .publicationEndDate)
        try container.encodeIfPresent(projectStartDate, forKey: .projectStartDate)
        try container.encodeIfPresent(projectEndDate, forKey: .projectEndDate)
        try container.encodeIfPresent(isPublic, forKey: .isPublic)
        try container.encodeIfPresent(isAnonymous, forKey: .isAnonymous)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(addressId, forKey: .addressId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(visibilityType, forKey: .visibilityType)
        try container.encodeIfPresent(publicationType, forKey: .publicationType)
        try container.encodeIfPresent(budgetId, forKey: .budgetId)
        try container.encodeIfPresent(requirements, forKey: .requirements)
    }



}
