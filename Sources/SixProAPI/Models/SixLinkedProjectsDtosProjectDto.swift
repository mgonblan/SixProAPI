//
// SixLinkedProjectsDtosProjectDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedProjectsDtosProjectDto: Codable, Hashable {

    public var id: UUID?
    public var creationTime: Date?
    public var creatorId: UUID?
    public var lastModificationTime: Date?
    public var lastModifierId: UUID?
    public var isDeleted: Bool?
    public var deleterId: UUID?
    public var deletionTime: Date?
    public var companyId: UUID?
    public var publicationId: UUID?
    public var categoryId: UUID?
    public var title: String?
    public var description: String?
    public var content: String?
    public var projectStartDate: Date?
    public var projectEndDate: Date?
    public var status: SixLinkedProjectsProjectStatus?
    public var participants: [SixLinkedProjectsDtosProjectParticipantDto]?

    public init(id: UUID? = nil, creationTime: Date? = nil, creatorId: UUID? = nil, lastModificationTime: Date? = nil, lastModifierId: UUID? = nil, isDeleted: Bool? = nil, deleterId: UUID? = nil, deletionTime: Date? = nil, companyId: UUID? = nil, publicationId: UUID? = nil, categoryId: UUID? = nil, title: String? = nil, description: String? = nil, content: String? = nil, projectStartDate: Date? = nil, projectEndDate: Date? = nil, status: SixLinkedProjectsProjectStatus? = nil, participants: [SixLinkedProjectsDtosProjectParticipantDto]? = nil) {
        self.id = id
        self.creationTime = creationTime
        self.creatorId = creatorId
        self.lastModificationTime = lastModificationTime
        self.lastModifierId = lastModifierId
        self.isDeleted = isDeleted
        self.deleterId = deleterId
        self.deletionTime = deletionTime
        self.companyId = companyId
        self.publicationId = publicationId
        self.categoryId = categoryId
        self.title = title
        self.description = description
        self.content = content
        self.projectStartDate = projectStartDate
        self.projectEndDate = projectEndDate
        self.status = status
        self.participants = participants
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case creationTime
        case creatorId
        case lastModificationTime
        case lastModifierId
        case isDeleted
        case deleterId
        case deletionTime
        case companyId
        case publicationId
        case categoryId
        case title
        case description
        case content
        case projectStartDate
        case projectEndDate
        case status
        case participants
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(creationTime, forKey: .creationTime)
        try container.encodeIfPresent(creatorId, forKey: .creatorId)
        try container.encodeIfPresent(lastModificationTime, forKey: .lastModificationTime)
        try container.encodeIfPresent(lastModifierId, forKey: .lastModifierId)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(deleterId, forKey: .deleterId)
        try container.encodeIfPresent(deletionTime, forKey: .deletionTime)
        try container.encodeIfPresent(companyId, forKey: .companyId)
        try container.encodeIfPresent(publicationId, forKey: .publicationId)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(projectStartDate, forKey: .projectStartDate)
        try container.encodeIfPresent(projectEndDate, forKey: .projectEndDate)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(participants, forKey: .participants)
    }



}
