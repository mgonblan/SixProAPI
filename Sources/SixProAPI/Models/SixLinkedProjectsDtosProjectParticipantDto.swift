//
// SixLinkedProjectsDtosProjectParticipantDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedProjectsDtosProjectParticipantDto: Codable, Hashable {

    public var id: UUID?
    public var creationTime: Date?
    public var creatorId: UUID?
    public var lastModificationTime: Date?
    public var lastModifierId: UUID?
    public var isDeleted: Bool?
    public var deleterId: UUID?
    public var deletionTime: Date?
    public var tenantId: UUID?
    public var company: SixLinkedCompaniesDtosVerySimpleCompanyDto?
    public var companyId: UUID?
    public var proposal: SixLinkedProposalsDtosSimpleProposalDto?
    public var proposalId: UUID?
    public var userId: UUID?
    public var user: SixLinkedUsersDtosSimpleUserDto?
    public var participantType: SixLinkedProjectsParticipantType?

    public init(id: UUID? = nil, creationTime: Date? = nil, creatorId: UUID? = nil, lastModificationTime: Date? = nil, lastModifierId: UUID? = nil, isDeleted: Bool? = nil, deleterId: UUID? = nil, deletionTime: Date? = nil, tenantId: UUID? = nil, company: SixLinkedCompaniesDtosVerySimpleCompanyDto? = nil, companyId: UUID? = nil, proposal: SixLinkedProposalsDtosSimpleProposalDto? = nil, proposalId: UUID? = nil, userId: UUID? = nil, user: SixLinkedUsersDtosSimpleUserDto? = nil, participantType: SixLinkedProjectsParticipantType? = nil) {
        self.id = id
        self.creationTime = creationTime
        self.creatorId = creatorId
        self.lastModificationTime = lastModificationTime
        self.lastModifierId = lastModifierId
        self.isDeleted = isDeleted
        self.deleterId = deleterId
        self.deletionTime = deletionTime
        self.tenantId = tenantId
        self.company = company
        self.companyId = companyId
        self.proposal = proposal
        self.proposalId = proposalId
        self.userId = userId
        self.user = user
        self.participantType = participantType
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case creationTime
        case creatorId
        case lastModificationTime
        case lastModifierId
        case isDeleted
        case deleterId
        case deletionTime
        case tenantId
        case company
        case companyId
        case proposal
        case proposalId
        case userId
        case user
        case participantType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(creationTime, forKey: .creationTime)
        try container.encodeIfPresent(creatorId, forKey: .creatorId)
        try container.encodeIfPresent(lastModificationTime, forKey: .lastModificationTime)
        try container.encodeIfPresent(lastModifierId, forKey: .lastModifierId)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(deleterId, forKey: .deleterId)
        try container.encodeIfPresent(deletionTime, forKey: .deletionTime)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(companyId, forKey: .companyId)
        try container.encodeIfPresent(proposal, forKey: .proposal)
        try container.encodeIfPresent(proposalId, forKey: .proposalId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(participantType, forKey: .participantType)
    }



}
