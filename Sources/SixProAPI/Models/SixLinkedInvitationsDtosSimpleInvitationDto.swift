//
// SixLinkedInvitationsDtosSimpleInvitationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedInvitationsDtosSimpleInvitationDto: Codable, Hashable {

    public var id: UUID?
    public var email: String?
    public var isUsed: Bool?
    public var companyId: UUID?
    public var company: SixLinkedCompaniesDtosSimpleCompanyDto?
    public var publicationId: UUID?
    public var publication: SixLinkedPublicationsDtosSimplePublicationDto?
    public var userId: UUID?
    public var invitationType: SixLinkedInvitationsInvitationType?

    public init(id: UUID? = nil, email: String? = nil, isUsed: Bool? = nil, companyId: UUID? = nil, company: SixLinkedCompaniesDtosSimpleCompanyDto? = nil, publicationId: UUID? = nil, publication: SixLinkedPublicationsDtosSimplePublicationDto? = nil, userId: UUID? = nil, invitationType: SixLinkedInvitationsInvitationType? = nil) {
        self.id = id
        self.email = email
        self.isUsed = isUsed
        self.companyId = companyId
        self.company = company
        self.publicationId = publicationId
        self.publication = publication
        self.userId = userId
        self.invitationType = invitationType
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case isUsed
        case companyId
        case company
        case publicationId
        case publication
        case userId
        case invitationType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(isUsed, forKey: .isUsed)
        try container.encodeIfPresent(companyId, forKey: .companyId)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(publicationId, forKey: .publicationId)
        try container.encodeIfPresent(publication, forKey: .publication)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(invitationType, forKey: .invitationType)
    }



}
