//
// SixLinkedCompaniesDtosCreateNewCompanyDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedCompaniesDtosCreateNewCompanyDto: Codable, Hashable {

    public var name: String?
    public var shortBio: String?
    public var description: String?
    public var slug: String?
    public var ssn: String?
    public var taxNumber: String?
    public var address: SixLinkedAddressesDtosAddressDto?
    public var categoryIds: [UUID]?

    public init(name: String? = nil, shortBio: String? = nil, description: String? = nil, slug: String? = nil, ssn: String? = nil, taxNumber: String? = nil, address: SixLinkedAddressesDtosAddressDto? = nil, categoryIds: [UUID]? = nil) {
        self.name = name
        self.shortBio = shortBio
        self.description = description
        self.slug = slug
        self.ssn = ssn
        self.taxNumber = taxNumber
        self.address = address
        self.categoryIds = categoryIds
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case shortBio
        case description
        case slug
        case ssn
        case taxNumber
        case address
        case categoryIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(shortBio, forKey: .shortBio)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(ssn, forKey: .ssn)
        try container.encodeIfPresent(taxNumber, forKey: .taxNumber)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(categoryIds, forKey: .categoryIds)
    }



}
