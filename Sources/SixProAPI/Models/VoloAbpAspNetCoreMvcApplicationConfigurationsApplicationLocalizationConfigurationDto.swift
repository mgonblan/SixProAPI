//
// VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationConfigurationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationConfigurationDto: Codable, Hashable {

    public var values: [String: [String: String]]?
    public var languages: [VoloAbpLocalizationLanguageInfo]?
    public var currentCulture: VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentCultureDto?
    public var defaultResourceName: String?
    public var languagesMap: [String: [VoloAbpNameValue]]?
    public var languageFilesMap: [String: [VoloAbpNameValue]]?

    public init(values: [String: [String: String]]? = nil, languages: [VoloAbpLocalizationLanguageInfo]? = nil, currentCulture: VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentCultureDto? = nil, defaultResourceName: String? = nil, languagesMap: [String: [VoloAbpNameValue]]? = nil, languageFilesMap: [String: [VoloAbpNameValue]]? = nil) {
        self.values = values
        self.languages = languages
        self.currentCulture = currentCulture
        self.defaultResourceName = defaultResourceName
        self.languagesMap = languagesMap
        self.languageFilesMap = languageFilesMap
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case values
        case languages
        case currentCulture
        case defaultResourceName
        case languagesMap
        case languageFilesMap
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(values, forKey: .values)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(currentCulture, forKey: .currentCulture)
        try container.encodeIfPresent(defaultResourceName, forKey: .defaultResourceName)
        try container.encodeIfPresent(languagesMap, forKey: .languagesMap)
        try container.encodeIfPresent(languageFilesMap, forKey: .languageFilesMap)
    }



}
