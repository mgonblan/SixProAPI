//
// SixLinkedAddressesDtosCreateUpdateAddressDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedAddressesDtosCreateUpdateAddressDto: Codable, Hashable {

    public var name: String?
    public var street: String?
    public var number: String?
    public var floor: String?
    public var door: String?
    public var other: String?
    public var postalCode: String?
    public var cityId: UUID?
    public var provinceId: UUID?
    public var countryId: UUID?
    public var publicationId: UUID?

    public init(name: String? = nil, street: String? = nil, number: String? = nil, floor: String? = nil, door: String? = nil, other: String? = nil, postalCode: String? = nil, cityId: UUID? = nil, provinceId: UUID? = nil, countryId: UUID? = nil, publicationId: UUID? = nil) {
        self.name = name
        self.street = street
        self.number = number
        self.floor = floor
        self.door = door
        self.other = other
        self.postalCode = postalCode
        self.cityId = cityId
        self.provinceId = provinceId
        self.countryId = countryId
        self.publicationId = publicationId
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case street
        case number
        case floor
        case door
        case other
        case postalCode
        case cityId
        case provinceId
        case countryId
        case publicationId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(floor, forKey: .floor)
        try container.encodeIfPresent(door, forKey: .door)
        try container.encodeIfPresent(other, forKey: .other)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(provinceId, forKey: .provinceId)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(publicationId, forKey: .publicationId)
    }



}
