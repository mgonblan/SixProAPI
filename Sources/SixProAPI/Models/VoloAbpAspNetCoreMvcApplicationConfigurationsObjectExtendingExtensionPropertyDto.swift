//
// VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyDto: Codable, Hashable {

    public var type: String?
    public var typeSimple: String?
    public var displayName: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingLocalizableStringDto?
    public var api: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiDto?
    public var ui: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiDto?
    public var attributes: [VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyAttributeDto]?
    public var configuration: [String: AnyCodable]?
    public var defaultValue: AnyCodable?

    public init(type: String? = nil, typeSimple: String? = nil, displayName: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingLocalizableStringDto? = nil, api: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiDto? = nil, ui: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiDto? = nil, attributes: [VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyAttributeDto]? = nil, configuration: [String: AnyCodable]? = nil, defaultValue: AnyCodable? = nil) {
        self.type = type
        self.typeSimple = typeSimple
        self.displayName = displayName
        self.api = api
        self.ui = ui
        self.attributes = attributes
        self.configuration = configuration
        self.defaultValue = defaultValue
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case typeSimple
        case displayName
        case api
        case ui
        case attributes
        case configuration
        case defaultValue
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(typeSimple, forKey: .typeSimple)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(api, forKey: .api)
        try container.encodeIfPresent(ui, forKey: .ui)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(configuration, forKey: .configuration)
        try container.encodeIfPresent(defaultValue, forKey: .defaultValue)
    }



}
