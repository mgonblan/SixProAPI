//
// VoloAbpHttpModelingParameterApiDescriptionModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct VoloAbpHttpModelingParameterApiDescriptionModel: Codable, Hashable {

    public var nameOnMethod: String?
    public var name: String?
    public var jsonName: String?
    public var type: String?
    public var typeSimple: String?
    public var isOptional: Bool?
    public var defaultValue: AnyCodable?
    public var constraintTypes: [String]?
    public var bindingSourceId: String?
    public var descriptorName: String?

    public init(nameOnMethod: String? = nil, name: String? = nil, jsonName: String? = nil, type: String? = nil, typeSimple: String? = nil, isOptional: Bool? = nil, defaultValue: AnyCodable? = nil, constraintTypes: [String]? = nil, bindingSourceId: String? = nil, descriptorName: String? = nil) {
        self.nameOnMethod = nameOnMethod
        self.name = name
        self.jsonName = jsonName
        self.type = type
        self.typeSimple = typeSimple
        self.isOptional = isOptional
        self.defaultValue = defaultValue
        self.constraintTypes = constraintTypes
        self.bindingSourceId = bindingSourceId
        self.descriptorName = descriptorName
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nameOnMethod
        case name
        case jsonName
        case type
        case typeSimple
        case isOptional
        case defaultValue
        case constraintTypes
        case bindingSourceId
        case descriptorName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nameOnMethod, forKey: .nameOnMethod)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(jsonName, forKey: .jsonName)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(typeSimple, forKey: .typeSimple)
        try container.encodeIfPresent(isOptional, forKey: .isOptional)
        try container.encodeIfPresent(defaultValue, forKey: .defaultValue)
        try container.encodeIfPresent(constraintTypes, forKey: .constraintTypes)
        try container.encodeIfPresent(bindingSourceId, forKey: .bindingSourceId)
        try container.encodeIfPresent(descriptorName, forKey: .descriptorName)
    }



}
