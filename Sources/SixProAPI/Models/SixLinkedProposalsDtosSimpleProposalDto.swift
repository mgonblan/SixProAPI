//
// SixLinkedProposalsDtosSimpleProposalDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedProposalsDtosSimpleProposalDto: Codable, Hashable {

    public var id: UUID?
    public var publicationId: UUID?
    public var publication: SixLinkedPublicationsDtosSimplePublicationDto?
    public var quantity: Double?
    public var description: String?
    public var status: SixLinkedProposalsProposalStatus?
    public var requirementFulfillments: [SixLinkedProposalsDtosRequirementFulfillmentDto]?

    public init(id: UUID? = nil, publicationId: UUID? = nil, publication: SixLinkedPublicationsDtosSimplePublicationDto? = nil, quantity: Double? = nil, description: String? = nil, status: SixLinkedProposalsProposalStatus? = nil, requirementFulfillments: [SixLinkedProposalsDtosRequirementFulfillmentDto]? = nil) {
        self.id = id
        self.publicationId = publicationId
        self.publication = publication
        self.quantity = quantity
        self.description = description
        self.status = status
        self.requirementFulfillments = requirementFulfillments
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case publicationId
        case publication
        case quantity
        case description
        case status
        case requirementFulfillments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(publicationId, forKey: .publicationId)
        try container.encodeIfPresent(publication, forKey: .publication)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(requirementFulfillments, forKey: .requirementFulfillments)
    }



}
