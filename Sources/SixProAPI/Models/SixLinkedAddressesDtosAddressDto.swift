//
// SixLinkedAddressesDtosAddressDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedAddressesDtosAddressDto: Codable, Hashable {

    public var id: UUID?
    public var creationTime: Date?
    public var creatorId: UUID?
    public var lastModificationTime: Date?
    public var lastModifierId: UUID?
    public var isDeleted: Bool?
    public var deleterId: UUID?
    public var deletionTime: Date?
    public var name: String?
    public var street: String?
    public var number: String?
    public var floor: String?
    public var door: String?
    public var other: String?
    public var postalCode: String?
    public var cityId: UUID?
    public var city: SixLinkedCitiesDtosCityDto?
    public var provinceId: UUID?
    public var province: SixLinkedProvincesDtosProvinceDto?
    public var countryId: UUID?
    public var country: SixLinkedCountriesDtosCountryDto?

    public init(id: UUID? = nil, creationTime: Date? = nil, creatorId: UUID? = nil, lastModificationTime: Date? = nil, lastModifierId: UUID? = nil, isDeleted: Bool? = nil, deleterId: UUID? = nil, deletionTime: Date? = nil, name: String? = nil, street: String? = nil, number: String? = nil, floor: String? = nil, door: String? = nil, other: String? = nil, postalCode: String? = nil, cityId: UUID? = nil, city: SixLinkedCitiesDtosCityDto? = nil, provinceId: UUID? = nil, province: SixLinkedProvincesDtosProvinceDto? = nil, countryId: UUID? = nil, country: SixLinkedCountriesDtosCountryDto? = nil) {
        self.id = id
        self.creationTime = creationTime
        self.creatorId = creatorId
        self.lastModificationTime = lastModificationTime
        self.lastModifierId = lastModifierId
        self.isDeleted = isDeleted
        self.deleterId = deleterId
        self.deletionTime = deletionTime
        self.name = name
        self.street = street
        self.number = number
        self.floor = floor
        self.door = door
        self.other = other
        self.postalCode = postalCode
        self.cityId = cityId
        self.city = city
        self.provinceId = provinceId
        self.province = province
        self.countryId = countryId
        self.country = country
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case creationTime
        case creatorId
        case lastModificationTime
        case lastModifierId
        case isDeleted
        case deleterId
        case deletionTime
        case name
        case street
        case number
        case floor
        case door
        case other
        case postalCode
        case cityId
        case city
        case provinceId
        case province
        case countryId
        case country
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(creationTime, forKey: .creationTime)
        try container.encodeIfPresent(creatorId, forKey: .creatorId)
        try container.encodeIfPresent(lastModificationTime, forKey: .lastModificationTime)
        try container.encodeIfPresent(lastModifierId, forKey: .lastModifierId)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(deleterId, forKey: .deleterId)
        try container.encodeIfPresent(deletionTime, forKey: .deletionTime)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(floor, forKey: .floor)
        try container.encodeIfPresent(door, forKey: .door)
        try container.encodeIfPresent(other, forKey: .other)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(provinceId, forKey: .provinceId)
        try container.encodeIfPresent(province, forKey: .province)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(country, forKey: .country)
    }



}
