//
// VoloAbpIdentityIdentityUserDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct VoloAbpIdentityIdentityUserDto: Codable, Hashable {

    public var extraProperties: [String: AnyCodable]?
    public var id: UUID?
    public var creationTime: Date?
    public var creatorId: UUID?
    public var lastModificationTime: Date?
    public var lastModifierId: UUID?
    public var isDeleted: Bool?
    public var deleterId: UUID?
    public var deletionTime: Date?
    public var tenantId: UUID?
    public var userName: String?
    public var name: String?
    public var surname: String?
    public var email: String?
    public var emailConfirmed: Bool?
    public var phoneNumber: String?
    public var phoneNumberConfirmed: Bool?
    public var lockoutEnabled: Bool?
    public var lockoutEnd: Date?
    public var concurrencyStamp: String?

    public init(extraProperties: [String: AnyCodable]? = nil, id: UUID? = nil, creationTime: Date? = nil, creatorId: UUID? = nil, lastModificationTime: Date? = nil, lastModifierId: UUID? = nil, isDeleted: Bool? = nil, deleterId: UUID? = nil, deletionTime: Date? = nil, tenantId: UUID? = nil, userName: String? = nil, name: String? = nil, surname: String? = nil, email: String? = nil, emailConfirmed: Bool? = nil, phoneNumber: String? = nil, phoneNumberConfirmed: Bool? = nil, lockoutEnabled: Bool? = nil, lockoutEnd: Date? = nil, concurrencyStamp: String? = nil) {
        self.extraProperties = extraProperties
        self.id = id
        self.creationTime = creationTime
        self.creatorId = creatorId
        self.lastModificationTime = lastModificationTime
        self.lastModifierId = lastModifierId
        self.isDeleted = isDeleted
        self.deleterId = deleterId
        self.deletionTime = deletionTime
        self.tenantId = tenantId
        self.userName = userName
        self.name = name
        self.surname = surname
        self.email = email
        self.emailConfirmed = emailConfirmed
        self.phoneNumber = phoneNumber
        self.phoneNumberConfirmed = phoneNumberConfirmed
        self.lockoutEnabled = lockoutEnabled
        self.lockoutEnd = lockoutEnd
        self.concurrencyStamp = concurrencyStamp
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case extraProperties
        case id
        case creationTime
        case creatorId
        case lastModificationTime
        case lastModifierId
        case isDeleted
        case deleterId
        case deletionTime
        case tenantId
        case userName
        case name
        case surname
        case email
        case emailConfirmed
        case phoneNumber
        case phoneNumberConfirmed
        case lockoutEnabled
        case lockoutEnd
        case concurrencyStamp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(extraProperties, forKey: .extraProperties)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(creationTime, forKey: .creationTime)
        try container.encodeIfPresent(creatorId, forKey: .creatorId)
        try container.encodeIfPresent(lastModificationTime, forKey: .lastModificationTime)
        try container.encodeIfPresent(lastModifierId, forKey: .lastModifierId)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(deleterId, forKey: .deleterId)
        try container.encodeIfPresent(deletionTime, forKey: .deletionTime)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(surname, forKey: .surname)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailConfirmed, forKey: .emailConfirmed)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(phoneNumberConfirmed, forKey: .phoneNumberConfirmed)
        try container.encodeIfPresent(lockoutEnabled, forKey: .lockoutEnabled)
        try container.encodeIfPresent(lockoutEnd, forKey: .lockoutEnd)
        try container.encodeIfPresent(concurrencyStamp, forKey: .concurrencyStamp)
    }



}
