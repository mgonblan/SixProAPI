//
// SixLinkedCompaniesDtosSimpleCompanyDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SixLinkedCompaniesDtosSimpleCompanyDto: Codable, Hashable {

    public var id: UUID?
    public var name: String?
    public var companyLogoId: UUID?
    public var companyBannerId: UUID?
    public var shortBio: String?
    public var description: String?
    public var isVerified: Bool?
    public var address: SixLinkedAddressesDtosSimpleAddressDto?
    public var categories: [SixLinkedCompaniesDtosSimpleCategoryDto]?
    public var publications: [SixLinkedPublicationsDtosVerySimplePublicationDto]?

    public init(id: UUID? = nil, name: String? = nil, companyLogoId: UUID? = nil, companyBannerId: UUID? = nil, shortBio: String? = nil, description: String? = nil, isVerified: Bool? = nil, address: SixLinkedAddressesDtosSimpleAddressDto? = nil, categories: [SixLinkedCompaniesDtosSimpleCategoryDto]? = nil, publications: [SixLinkedPublicationsDtosVerySimplePublicationDto]? = nil) {
        self.id = id
        self.name = name
        self.companyLogoId = companyLogoId
        self.companyBannerId = companyBannerId
        self.shortBio = shortBio
        self.description = description
        self.isVerified = isVerified
        self.address = address
        self.categories = categories
        self.publications = publications
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case companyLogoId
        case companyBannerId
        case shortBio
        case description
        case isVerified
        case address
        case categories
        case publications
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(companyLogoId, forKey: .companyLogoId)
        try container.encodeIfPresent(companyBannerId, forKey: .companyBannerId)
        try container.encodeIfPresent(shortBio, forKey: .shortBio)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(isVerified, forKey: .isVerified)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(publications, forKey: .publications)
    }



}
